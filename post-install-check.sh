#!/bin/bash

# ==============================================================================
# POST-INSTALL CHECK SCRIPT - CodeSeek v1.0
# ==============================================================================
# Script para verifica√ß√£o p√≥s-instala√ß√£o do CodeSeek
# Verifica se todos os componentes est√£o funcionando corretamente
#
# Uso: sudo bash post-install-check.sh [DOMAIN]
# ==============================================================================

set -euo pipefail

# --- Cores para output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Fun√ß√µes de log ---
log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
step() { echo -e "\n${BLUE}=== $1 ===${NC}"; }

# --- Vari√°veis ---
DOMAIN="${1:-}"
APP_DIR="/opt/codeseek"
USER="codeseek"
SERVICE="codeseek"
CHECK_RESULTS=()
FAILED_CHECKS=0
TOTAL_CHECKS=0

# --- Fun√ß√£o para adicionar resultado de check ---
add_check_result() {
    local check_name="$1"
    local status="$2"
    local details="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ "$status" = "PASS" ]; then
        CHECK_RESULTS+=("‚úÖ $check_name: $details")
        log "$check_name: PASS - $details"
    else
        CHECK_RESULTS+=("‚ùå $check_name: $details")
        error "$check_name: FAIL - $details"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# --- Fun√ß√£o para verificar se comando existe ---
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# --- Verificar usu√°rio codeseek ---
check_user() {
    step "Verificando usu√°rio codeseek"
    
    if id "$USER" &>/dev/null; then
        local user_home=$(getent passwd "$USER" | cut -d: -f6)
        add_check_result "Usu√°rio codeseek" "PASS" "Usu√°rio existe com home: $user_home"
    else
        add_check_result "Usu√°rio codeseek" "FAIL" "Usu√°rio n√£o encontrado"
    fi
}

# --- Verificar diret√≥rio da aplica√ß√£o ---
check_app_directory() {
    step "Verificando diret√≥rio da aplica√ß√£o"
    
    if [ -d "$APP_DIR" ]; then
        local owner=$(stat -c '%U' "$APP_DIR")
        local permissions=$(stat -c '%a' "$APP_DIR")
        add_check_result "Diret√≥rio da aplica√ß√£o" "PASS" "Existe em $APP_DIR (owner: $owner, perms: $permissions)"
        
        # Verificar estrutura de diret√≥rios
        local missing_dirs=()
        for dir in "frontend" "backend" "logs"; do
            if [ ! -d "$APP_DIR/$dir" ]; then
                missing_dirs+=("$dir")
            fi
        done
        
        if [ ${#missing_dirs[@]} -eq 0 ]; then
            add_check_result "Estrutura de diret√≥rios" "PASS" "Todos os diret√≥rios necess√°rios existem"
        else
            add_check_result "Estrutura de diret√≥rios" "FAIL" "Diret√≥rios ausentes: ${missing_dirs[*]}"
        fi
    else
        add_check_result "Diret√≥rio da aplica√ß√£o" "FAIL" "Diret√≥rio $APP_DIR n√£o encontrado"
    fi
}

# --- Verificar Node.js e npm ---
check_nodejs() {
    step "Verificando Node.js e npm"
    
    if command_exists node; then
        local node_version=$(node --version)
        add_check_result "Node.js" "PASS" "Vers√£o: $node_version"
    else
        add_check_result "Node.js" "FAIL" "Node.js n√£o encontrado"
    fi
    
    if command_exists npm; then
        local npm_version=$(npm --version)
        add_check_result "npm" "PASS" "Vers√£o: $npm_version"
        
        # Verificar se npm funciona para o usu√°rio codeseek
        if sudo -u "$USER" which npm >/dev/null 2>&1; then
            add_check_result "npm para usu√°rio codeseek" "PASS" "npm acess√≠vel para usu√°rio codeseek"
        else
            add_check_result "npm para usu√°rio codeseek" "FAIL" "npm n√£o acess√≠vel para usu√°rio codeseek"
        fi
    else
        add_check_result "npm" "FAIL" "npm n√£o encontrado"
    fi
}

# --- Verificar depend√™ncias do backend ---
check_backend_dependencies() {
    step "Verificando depend√™ncias do backend"
    
    if [ -f "$APP_DIR/backend/package.json" ]; then
        add_check_result "package.json" "PASS" "Arquivo encontrado"
        
        if [ -d "$APP_DIR/backend/node_modules" ]; then
            local modules_count=$(find "$APP_DIR/backend/node_modules" -maxdepth 1 -type d | wc -l)
            add_check_result "node_modules" "PASS" "$modules_count m√≥dulos instalados"
        else
            add_check_result "node_modules" "FAIL" "Diret√≥rio node_modules n√£o encontrado"
        fi
    else
        add_check_result "package.json" "FAIL" "Arquivo n√£o encontrado"
    fi
}

# --- Verificar build do frontend ---
check_frontend_build() {
    step "Verificando build do frontend"
    
    if [ -d "$APP_DIR/frontend/dist" ]; then
        local files_count=$(find "$APP_DIR/frontend/dist" -type f | wc -l)
        add_check_result "Build do frontend" "PASS" "$files_count arquivos no diret√≥rio dist"
    else
        add_check_result "Build do frontend" "FAIL" "Diret√≥rio dist n√£o encontrado"
    fi
}

# --- Verificar servi√ßo PM2 ---
check_pm2_service() {
    step "Verificando servi√ßo PM2"

    if pm2 describe "$SERVICE" >/dev/null 2>&1; then
        add_check_result "Processo PM2" "PASS" "$SERVICE encontrado"
    else
        add_check_result "Processo PM2" "FAIL" "$SERVICE n√£o encontrado ou inativo"
    fi
}

# --- Verificar Nginx ---
check_nginx() {
    step "Verificando Nginx"
    
    if command_exists nginx; then
        local nginx_version=$(nginx -v 2>&1 | cut -d' ' -f3)
        add_check_result "Nginx" "PASS" "Vers√£o: $nginx_version"
        
        if [ -f "/etc/nginx/sites-available/codeseek" ]; then
            add_check_result "Configura√ß√£o Nginx" "PASS" "Arquivo de configura√ß√£o encontrado"
            
            if [ -L "/etc/nginx/sites-enabled/codeseek" ]; then
                add_check_result "Site habilitado" "PASS" "Site codeseek habilitado"
            else
                add_check_result "Site habilitado" "FAIL" "Site codeseek n√£o habilitado"
            fi
            
            # Testar configura√ß√£o
            if nginx -t >/dev/null 2>&1; then
                add_check_result "Teste de configura√ß√£o" "PASS" "Configura√ß√£o Nginx v√°lida"
            else
                add_check_result "Teste de configura√ß√£o" "FAIL" "Configura√ß√£o Nginx inv√°lida"
            fi
        else
            add_check_result "Configura√ß√£o Nginx" "FAIL" "Arquivo de configura√ß√£o n√£o encontrado"
        fi
        
        local nginx_status=$(systemctl is-active nginx 2>/dev/null || echo "inactive")
        if [ "$nginx_status" = "active" ]; then
            add_check_result "Status Nginx" "PASS" "Nginx est√° ativo"
        else
            add_check_result "Status Nginx" "FAIL" "Nginx n√£o est√° ativo (status: $nginx_status)"
        fi
    else
        add_check_result "Nginx" "FAIL" "Nginx n√£o encontrado"
    fi
}

# --- Gerar relat√≥rio final ---
generate_report() {
    step "Relat√≥rio Final"
    
    echo
    echo "==========================================="
    echo "         RELAT√ìRIO DE VERIFICA√á√ÉO"
    echo "==========================================="
    echo
    
    for result in "${CHECK_RESULTS[@]}"; do
        echo "$result"
    done
    
    echo
    echo "==========================================="
    echo "RESUMO: $((TOTAL_CHECKS - FAILED_CHECKS))/$TOTAL_CHECKS verifica√ß√µes passaram"
    
    if [ "$FAILED_CHECKS" -eq 0 ]; then
        log "‚úÖ Todas as verifica√ß√µes passaram! CodeSeek est√° funcionando corretamente."
        echo
        echo "üöÄ Pr√≥ximos passos:"
        echo "   ‚Ä¢ Acesse sua aplica√ß√£o no navegador"
        echo "   ‚Ä¢ Configure seu primeiro projeto"
        echo "   ‚Ä¢ Monitore os logs em $APP_DIR/logs"
        return 0
    else
        error "‚ùå $FAILED_CHECKS verifica√ß√µes falharam. Verifique os problemas acima."
        echo
        echo "üîß Para resolver problemas:"
        echo "   ‚Ä¢ Execute: sudo ./troubleshoot.sh"
        echo "   ‚Ä¢ Verifique logs: sudo journalctl -u $SERVICE -f"
        echo "   ‚Ä¢ Reinicie servi√ßos: sudo systemctl restart $SERVICE nginx"
        return 1
    fi
}

# --- Fun√ß√£o principal ---
main() {
    echo "==========================================="
    echo "    CodeSeek v1.0 - Verifica√ß√£o P√≥s-Instala√ß√£o"
    echo "==========================================="
    echo
    
    # Verificar se est√° executando como root
    if [ "$(id -u)" -ne 0 ]; then
        error "Este script deve ser executado como root (use sudo)"
        exit 1
    fi
    
    # Executar todas as verifica√ß√µes
    check_user
    check_app_directory
    check_nodejs
    check_backend_dependencies
    check_frontend_build
    check_pm2_service
    check_nginx
    
    # Gerar relat√≥rio final
    generate_report
}

# Executar script principal
main "$@"

# ==============================================================================
# 4. VERIFICA√á√ïES DE BANCO DE DADOS
# ==============================================================================

info "Verificando banco de dados..."

if [ -f "$APP_DIR/backend/.env" ]; then
    DB_NAME=$(grep DB_NAME "$APP_DIR/backend/.env" | cut -d '=' -f2)
    DB_USER=$(grep DB_USER "$APP_DIR/backend/.env" | cut -d '=' -f2)
    
    # Verificar se o banco existe
    if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
        log "Banco de dados '$DB_NAME' existe"
        
        # Verificar se h√° tabelas
        TABLE_COUNT=$(sudo -u postgres psql -d "$DB_NAME" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';")
        if [ "$TABLE_COUNT" -gt 0 ]; then
            log "Banco de dados possui $TABLE_COUNT tabela(s)"
        else
            warning "Banco de dados est√° vazio (sem tabelas)"
            ((WARNING_COUNT++))
        fi
    else
        error "Banco de dados '$DB_NAME' n√£o existe"
        ((ERROR_COUNT++))
    fi
    
    # Verificar se o usu√°rio do banco existe
    if sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
        log "Usu√°rio do banco '$DB_USER' existe"
    else
        error "Usu√°rio do banco '$DB_USER' n√£o existe"
        ((ERROR_COUNT++))
    fi
fi

# ==============================================================================
# 5. VERIFICA√á√ïES DE CONECTIVIDADE
# ==============================================================================

info "Verificando conectividade da aplica√ß√£o..."

# Testar porta 3000 (aplica√ß√£o)
if netstat -tuln | grep -q ":3000 "; then
    log "Aplica√ß√£o est√° escutando na porta 3000"
    
    # Testar resposta HTTP
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
    if [[ "$HTTP_CODE" =~ ^(200|302|404)$ ]]; then
        log "Aplica√ß√£o est√° respondendo (HTTP $HTTP_CODE)"
    else
        error "Aplica√ß√£o n√£o est√° respondendo corretamente (HTTP $HTTP_CODE)"
        ((ERROR_COUNT++))
    fi
else
    error "Aplica√ß√£o n√£o est√° escutando na porta 3000"
    ((ERROR_COUNT++))
fi

# Testar porta 80 (Nginx)
if netstat -tuln | grep -q ":80 "; then
    log "Nginx est√° escutando na porta 80"
else
    error "Nginx n√£o est√° escutando na porta 80"
    ((ERROR_COUNT++))
fi

# Testar porta 443 (HTTPS) se configurado
if netstat -tuln | grep -q ":443 "; then
    log "Nginx est√° escutando na porta 443 (HTTPS)"
else
    info "Nginx n√£o est√° escutando na porta 443 (HTTPS n√£o configurado)"
fi

# ==============================================================================
# 6. VERIFICA√á√ïES DE DOM√çNIO (se fornecido)
# ==============================================================================

if [[ -n "$DOMAIN" ]]; then
    info "Verificando configura√ß√£o do dom√≠nio $DOMAIN..."
    
    # Verificar se o dom√≠nio est√° configurado no Nginx
    if grep -r "$DOMAIN" /etc/nginx/sites-enabled/ &>/dev/null; then
        log "Dom√≠nio '$DOMAIN' configurado no Nginx"
    else
        error "Dom√≠nio '$DOMAIN' n√£o configurado no Nginx"
        ((ERROR_COUNT++))
    fi
    
    # Testar acesso HTTP
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: $DOMAIN" http://localhost || echo "000")
    if [[ "$HTTP_CODE" =~ ^(200|302|404)$ ]]; then
        log "Dom√≠nio responde via HTTP (c√≥digo $HTTP_CODE)"
    else
        warning "Dom√≠nio n√£o responde via HTTP (c√≥digo $HTTP_CODE)"
        ((WARNING_COUNT++))
    fi
    
    # Verificar certificado SSL se HTTPS estiver configurado
    if netstat -tuln | grep -q ":443 "; then
        if echo | openssl s_client -servername "$DOMAIN" -connect localhost:443 2>/dev/null | grep -q "Verify return code: 0"; then
            log "Certificado SSL v√°lido para $DOMAIN"
        else
            warning "Certificado SSL pode ter problemas para $DOMAIN"
            ((WARNING_COUNT++))
        fi
    fi
fi

# ==============================================================================
# 7. VERIFICA√á√ïES DE LOGS
# ==============================================================================

info "Verificando logs recentes..."

# Verificar logs do CodeSeek
if journalctl -u codeseek.service --since "5 minutes ago" | grep -i error; then
    warning "Erros encontrados nos logs do CodeSeek (√∫ltimos 5 minutos)"
    ((WARNING_COUNT++))
else
    log "Nenhum erro nos logs do CodeSeek (√∫ltimos 5 minutos)"
fi

# Verificar logs do Nginx
if tail -n 50 /var/log/nginx/error.log 2>/dev/null | grep -i error; then
    warning "Erros encontrados nos logs do Nginx"
    ((WARNING_COUNT++))
else
    log "Nenhum erro recente nos logs do Nginx"
fi

# ==============================================================================
# 8. TESTE DE FUNCIONALIDADES B√ÅSICAS
# ==============================================================================

info "Testando funcionalidades b√°sicas..."

# Testar diagn√≥stico da aplica√ß√£o
if [ -f "$APP_DIR/backend/diagnose.js" ]; then
    cd "$APP_DIR/backend"
    if sudo -u $APP_USER node diagnose.js &>/dev/null; then
        log "Diagn√≥stico da aplica√ß√£o passou"
    else
        warning "Diagn√≥stico da aplica√ß√£o falhou"
        ((WARNING_COUNT++))
    fi
else
    info "Script de diagn√≥stico n√£o encontrado"
fi

# ==============================================================================
# 9. RELAT√ìRIO FINAL
# ==============================================================================

echo -e "\n${BLUE}=========================================${NC}"
echo -e "${BLUE}  Relat√≥rio da Verifica√ß√£o P√≥s-Instala√ß√£o  ${NC}"
echo -e "${BLUE}=========================================${NC}\n"

if [ "$ERROR_COUNT" -eq 0 ] && [ "$WARNING_COUNT" -eq 0 ]; then
    echo -e "${GREEN}‚úì Instala√ß√£o bem-sucedida! Todos os testes passaram.${NC}"
    echo -e "\n${GREEN}üéâ CodeSeek est√° pronto para uso!${NC}"
    
    if [[ -n "$DOMAIN" ]]; then
        echo -e "\nAcesse sua aplica√ß√£o em:"
        if netstat -tuln | grep -q ":443 "; then
            echo -e "${BLUE}https://$DOMAIN${NC}"
        else
            echo -e "${BLUE}http://$DOMAIN${NC}"
        fi
    else
        echo -e "\nAcesse sua aplica√ß√£o em:"
        echo -e "${BLUE}http://localhost${NC} ou ${BLUE}http://SEU_IP${NC}"
    fi
    
elif [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${YELLOW}‚ö† Instala√ß√£o conclu√≠da com $WARNING_COUNT aviso(s)${NC}"
    echo -e "\nA aplica√ß√£o deve estar funcionando, mas h√° alguns avisos."
    echo -e "Recomenda-se revisar os avisos acima."
    
else
    echo -e "${RED}‚úó Instala√ß√£o com problemas!${NC}"
    echo -e "\nEncontrados $ERROR_COUNT erro(s) e $WARNING_COUNT aviso(s)."
    echo -e "\nA aplica√ß√£o pode n√£o estar funcionando corretamente."
    echo -e "\n${YELLOW}Comandos √∫teis para diagn√≥stico:${NC}"
    echo -e "Ver logs do CodeSeek:     ${BLUE}sudo journalctl -u codeseek.service -f${NC}"
    echo -e "Ver logs do Nginx:        ${BLUE}sudo tail -f /var/log/nginx/error.log${NC}"
    echo -e "Reiniciar CodeSeek:       ${BLUE}sudo systemctl restart codeseek.service${NC}"
    echo -e "Diagn√≥stico da aplica√ß√£o: ${BLUE}cd $APP_DIR/backend && sudo -u $APP_USER node diagnose.js${NC}"
    echo -e "\nPara troubleshooting detalhado, execute:"
    echo -e "${BLUE}sudo bash troubleshoot.sh${NC}"
fi

echo -e "\n${BLUE}=========================================${NC}"
echo -e "Erros: ${RED}$ERROR_COUNT${NC} | Avisos: ${YELLOW}$WARNING_COUNT${NC}"
echo -e "${BLUE}=========================================${NC}\n"

# Salvar relat√≥rio
REPORT_FILE="$APP_DIR/post-install-report.txt"
cat > "$REPORT_FILE" << EOF
CodeSeek Post-Installation Report
=================================
Check Date: $(date)
Domain: ${DOMAIN:-"Not specified"}
Errors: $ERROR_COUNT
Warnings: $WARNING_COUNT

Status Summary:
- Application Directory: $([ -d "$APP_DIR" ] && echo "OK" || echo "MISSING")
- CodeSeek Service: $(systemctl is-active codeseek.service 2>/dev/null || echo "inactive")
- PostgreSQL: $(systemctl is-active postgresql 2>/dev/null || echo "inactive")
- Redis: $(systemctl is-active redis-server 2>/dev/null || echo "inactive")
- Nginx: $(systemctl is-active nginx 2>/dev/null || echo "inactive")
- Port 3000: $(netstat -tuln | grep -q ":3000 " && echo "LISTENING" || echo "NOT LISTENING")
- Port 80: $(netstat -tuln | grep -q ":80 " && echo "LISTENING" || echo "NOT LISTENING")
- Port 443: $(netstat -tuln | grep -q ":443 " && echo "LISTENING" || echo "NOT LISTENING")

For detailed logs, check:
- CodeSeek: sudo journalctl -u codeseek.service
- Nginx: sudo tail /var/log/nginx/error.log
- PostgreSQL: sudo tail /var/log/postgresql/postgresql-*-main.log
EOF

if [ -d "$APP_DIR" ]; then
    chown $APP_USER:$APP_USER "$REPORT_FILE" 2>/dev/null
fi

info "Relat√≥rio salvo em: $REPORT_FILE"

exit $ERROR_COUNT