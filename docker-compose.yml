version: '3.8'

services:
  # Serviço do aplicativo Node.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: codeseek-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./backend/uploads:/app/backend/uploads
      - ./backend/node_modules:/app/backend/node_modules
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=codeseek_prod
      - DB_USER=codeseek_user
      - DB_PASSWORD=codeseek_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - SESSION_SECRET=your_session_secret_here
      - BASE_URL=http://localhost:3000
    depends_on:
      - postgres
      - redis
    networks:
      - codeseek-network

  # Serviço do banco de dados PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: codeseek-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=codeseek_user
      - POSTGRES_PASSWORD=codeseek_password
      - POSTGRES_DB=codeseek_prod
    networks:
      - codeseek-network

  # Serviço do Redis
  redis:
    image: redis:7-alpine
    container_name: codeseek-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - codeseek-network

  # Serviço do Nginx (proxy reverso)
  nginx:
    image: nginx:1.23-alpine
    container_name: codeseek-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/public:/app/frontend/public
      - ./backend/uploads:/app/backend/uploads
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - codeseek-network

  # Serviço do Certbot (para certificados SSL)
  certbot:
    image: certbot/certbot
    container_name: codeseek-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres-data:
  redis-data:

networks:
  codeseek-network:
    driver: bridge